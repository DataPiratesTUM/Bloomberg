import { formatDistance, formatDistanceToNow } from "date-fns";
import { GetServerSidePropsContext, NextPageContext } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useState } from "react";
import { Graph } from "../../components/Graph";
import { Layout } from "../../components/Layout";
import Setps from "../../components/Steps";
import Link from "next/link";
import toast, { Toaster } from "react-hot-toast";
import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const idPg = context.query.security;
  console.log("ID Site " + idPg);
  // Mock data
  /* let security: Security = {
    security_id: "12345",
    creationDate: Date.now() - 100000,
    price: 124,
    creator: "TUM",
    description: "Best University in the World",
    title: "Global value numbers and redundant computations?",
    ttl_phase_one: Date.now() + 10000,
    ttl_phase_two: 1000 * 60 * 60 * 24 * 31 * 6,
    fundingAmount: 125_000,
    fundingDate: null,
    quantity: 3,
  }; */
  var myHeaders = new Headers();
  myHeaders.append("X-User-Id", "4e805cc9-fe3b-4649-96fc-f39634a557cd");
  var requestOptions = {
    method: "GET",
    headers: myHeaders,
  };
<<<<<<< HEAD
  let res_security = await fetch(
    "https://organisation.ban.app/security/" + idPg,
    requestOptions
  );
=======
  let res_security = await fetch("https://organisation.ban.app/security/" + id, requestOptions);
>>>>>>> origin/index
  console.table(res_security);
  const security: Security = await res_security.json();
  console.log(security);

  var headers = new Headers();

  /* 
  let res_security_creater = await fetch(
    "https://transaction.ban.app/organisation/" + security.creator,
    {
      method: "GET",
      redirect: "follow",
    }
  );

  const security_creator: TimeseriesCole[] = await res_security_creater.json(); */

  let res_security_history = await fetch(
    "https://transaction.ban.app/order/history/security/" + idPg,
    {
      method: "GET",
      redirect: "follow",
    }
  );

  const security_history: TimeseriesCole[] = await res_security_history.json();
  return { props: { security, idPg } };
}

interface Sec {
  // security_history: TimeseriesCole[];
  security: Security;
  idPg: string;
}

export default function Security(props: Sec) {
  const queryClient = useQueryClient();

  const orders = useQuery(["orders"], async () => {
    const res = await fetch(
      "https://transaction.ban.app/open_orders/" + props.idPg,
      {
        headers: { "X-User-Id": "4e805cc9-fe3b-4649-96fc-f39634a557cd" },
      }
    );
    const history: OpenOrder[] = await res.json();
    return history;
  });
  const timeseries = useQuery(["timeseries"], async () => {
    const res = await fetch(
      "https://transaction.ban.app/order/history/security/" + props.idPg
    );
    const history: TimeseriesCole[] = await res.json();
    return history;
  });

  const orderMutation = useMutation(
    (order: Order) =>
      fetch(`https://transaction.ban.app/order/place`, {
        method: "POST",
        body: JSON.stringify(order),
        headers: {
          "X-User-Id": "4e805cc9-fe3b-4649-96fc-f39634a557cd",
        },
      }),
    {
      onMutate: () => {
        queryClient.invalidateQueries(["orders", "timeseries"]);
      },
    }
  );

  const showAlertPlacedOrder = () => {
    toast.success("Order placed");
  };

  const showAlertDeletedOrder = () => {
    toast.success("Order deleted");
  };
  const security_history = props.security_history;
  const [quantity, setQuantity] = useState(0);
  const [offer, setOffer] = useState(0);
  const security = props.security;
  const timeToNextPhase = security.fundingDate
    ? formatDistanceToNow(security.fundingDate + security.ttl_phase_two)
    : formatDistanceToNow(security.creationDate + security.ttl_phase_one);

  async function handleOrder(
    side: "buy" | "sell",
    action: "ADD" | "DEL" = "ADD"
  ) {
    const order = {
      security: props.idPg,
      quantity: quantity * (action === "ADD" ? 1 : -1),
      price: offer,
      side,
    };
    orderMutation.mutate(order);
    action === "DEL" ? showAlertDeletedOrder() : showAlertPlacedOrder();
  }

  return (
    <>
      <Head>
        <title>{security.title}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <section className="grid grid-rows-[0.5fr_2fr] grid-cols-2 gap-2">
          <section>
            <h2 className="text-4xl font-bold tracking-tight  sm:text-5xl pb-4">
              {security.title}
            </h2>
            <p>Currently trading at {security.price / 1000}€/share</p>
            {/* <p className="text-xl">Study presented by: {security.creator}</p>
            <p className="text-xl">{security.description}</p> */}
            <Setps fundingSucces={1} />
          </section>
          <section className="row-span-2 plac ">
            <h2 className="text-4xl font-bold tracking-tight  sm:text-5xl pb-4">
              Order Book
            </h2>
            <div className="flex">
              <div className="flex flex-col mr-5">
                Quantity
                <input
                  min="0"
                  className="
            form-control
            px-3
            py-1.5
            text-base
            font-normal
            text-gray-700
            bg-white bg-clip-padding
            border border-solid border-gray-300
            rounded
            transition
            ease-in-out
            m-0
            focus:text-gray-700 focus:bg-white focus:outline-none
          "
                  type="number"
                  name="quantity"
                  id="quantity"
                  onChange={(e) => setQuantity(Number(e.target.value))}
                  value={quantity}
                />
              </div>{" "}
              <div className="flex flex-col ml-5">
                Price{" "}
                <input
                  min="0"
                  className="
            form-control
            px-3
            py-1.5
            text-base
            font-normal
            text-gray-700
            bg-white bg-clip-padding
            border border-solid border-gray-300
            rounded
            transition
            ease-in-out
            m-0
            focus:text-gray-700 focus:bg-white focus:outline-none
          "
                  type="number" // number input ist immer integer, somit keine floats möglich => Textinput benutzen?
                  name="offer"
                  id="offer"
                  onChange={(e) => setOffer(Number(e.target.value))}
                  value={offer}
                />
              </div>{" "}
              <h3 className="text-4xl font-bold tracking-tight  sm:text-5xl py-4">
                {(quantity * offer) / 100 != 0
                  ? " = " + (quantity * offer) / 100 + "€"
                  : " "}
              </h3>
            </div>
            <div className="flex gap-5 pt-5">
              <div className="">
                <button
                  onClick={() => handleOrder("buy")}
                  className="block mb-2 px-6 py-2.5 bg-blue text-white font-medium text-xs leading-tight uppercase rounded shadow-md hover:bg-blue-700 hover:shadow-lg focus:bg-blue-700 focus:shadow-lg focus:outline-none focus:ring-0 active:bg-blue-800 active:shadow-lg transition duration-150 ease-in-out"
                >
                  Place Buy Order
                </button>
                <button
                  onClick={() => handleOrder("buy", "DEL")}
                  className="block px-6  mb-2 py-2.5 bg-orange text-white font-medium text-xs leading-tight uppercase rounded shadow-md hover:bg-red-700 hover:shadow-lg focus:bg-red-700 focus:shadow-lg focus:outline-none focus:ring-0 active:bg-blue-800 active:shadow-lg transition duration-150 ease-in-out"
                >
                  Delete Buy Order
                </button>
              </div>
              <div>
                <button
                  onClick={() => handleOrder("sell")}
                  type="button"
                  className="block px-6  mb-2 py-2.5 bg-blue text-white font-medium text-xs leading-tight uppercase rounded shadow-md hover:bg-blue-700 hover:shadow-lg focus:bg-blue-700 focus:shadow-lg focus:outline-none focus:ring-0 active:bg-blue-800 active:shadow-lg transition duration-150 ease-in-out"
                >
                  Place Sell Order
                </button>

                <button
                  onClick={() => handleOrder("sell", "DEL")}
                  type="button"
                  className="block px-6 mb-2 py-2.5 bg-orange text-white font-medium text-xs leading-tight uppercase rounded shadow-md hover:bg-red-700 hover:shadow-lg focus:bg-red-700 focus:shadow-lg focus:outline-none focus:ring-0 active:bg-blue-800 active:shadow-lg transition duration-150 ease-in-out"
                >
                  Delete Sell Order
                </button>
              </div>
            </div>
            {orders.isLoading
              ? "Loading..."
              : orders.isError
              ? "Error!"
              : orders.data
              ? orders.data
                  .filter((order) => order.quantity > 0)
                  .sort((i, j) => j.price - i.price)
                  .map((order) => {
                    return (
                      <section
                        key={order.price}
                        className={`max-w-lg   border-2 shadow  rounded my-2 p-4 flex justify-between ${
                          order.side === "sell"
                            ? "border-orange"
                            : "border-blue"
                        }`}
                      >
                        <p>
                          {order.side.toLocaleUpperCase()}: {order.quantity}{" "}
                          units @ {order.price / 1000}€
                        </p>
                      </section>
                    );
                  })
              : null}
          </section>
          <section>
            {timeseries.data && (
              <Graph
                timeseries={timeseries.data
                  .sort((a, b) => a.created - b.created)
                  .map((p) => {
                    return {
                      timestamp: p.created * 1000,
                      price: p.price / 1000,
                    };
                  })}
              />
            )}
          </section>
        </section>
        <h2 className="text-4xl font-bold tracking-tight  sm:text-5xl py-6">
          Description
        </h2>
        <div className="block row-span-2 px-6 mb-2 py-2.5 bo text-black font-medium text-xs leading-tight  rounded shadow-md  transition duration-150 ease-in-out">
          <p className="text-xl font-serif">{security.description}</p>
        </div>
      </Layout>
    </>
  );
}
