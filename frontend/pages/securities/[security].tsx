import { formatDistance, formatDistanceToNow } from "date-fns";
import { GetServerSidePropsContext, NextPageContext } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useState } from "react";
import { Graph } from "../../components/Graph";
import { Layout } from "../../components/Layout";
import Setps from "../../components/Steps";
import Link from "next/link";

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const id = context.query.security;
  console.log("ID Site " + id);
  // Mock data
  /* let security: Security = {
    security_id: "12345",
    creationDate: Date.now() - 100000,
    price: 124,
    creator: "TUM",
    description: "Best University in the World",
    title: "Global value numbers and redundant computations?",
    ttl_phase_one: Date.now() + 10000,
    ttl_phase_two: 1000 * 60 * 60 * 24 * 31 * 6,
    fundingAmount: 125_000,
    fundingDate: null,
    quantity: 3,
  }; */
  var myHeaders = new Headers();
  myHeaders.append("X-User-Id", "4e805cc9-fe3b-4649-96fc-f39634a557cd");
  var requestOptions = {
    method: "GET",
    headers: myHeaders,
  };
  let res_security = await fetch(
    "https://organisation.ban.app/security/" + id,
    requestOptions
  );
  console.table(res_security);
  const security: Security = await res_security.json();
  console.log(security);

  /* 
  let res_security_creater = await fetch(
    "https://transaction.ban.app/organisation/" + security.creator,
    {
      method: "GET",
      redirect: "follow",
    }
  );

  const security_creator: TimeseriesCole[] = await res_security_creater.json(); */

  let res_security_history = await fetch(
    "https://transaction.ban.app/order/history/security/" + id,
    {
      method: "GET",
      redirect: "follow",
    }
  );

  const security_history: TimeseriesCole[] = await res_security_history.json();
  return { props: { security_history, security } };
}

interface Sec {
  security_history: TimeseriesCole[];
  security: Security;
}

export default function Security(props: Sec) {
  const router = useRouter();
  console.log(router.query);
  //const security_id = router.asPath;

  const security_history = props.security_history;
  const [quantity, setQuantity] = useState(0);
  const [offer, setOffer] = useState(0);
  const security = props.security;
  const timeToNextPhase = security.fundingDate
    ? formatDistanceToNow(security.fundingDate + security.ttl_phase_two)
    : formatDistanceToNow(security.creationDate + security.ttl_phase_one);

  async function handleOrder(action: string) {
    const order = {
      security: "3e8b7701-9d3e-407a-b78a-d8fa4d07bff5",
      quantity: quantity,
      price: offer,
      side: action,
    };
    let myHeaders = new Headers();
    myHeaders.append("X-User-Id", "4e805cc9-fe3b-4649-96fc-f39634a557cd");
    const config = {
      method: "POST",
      headers: myHeaders,
      body: JSON.stringify(order),
      redirect: "follow",
    };
    console.log(order);
    // @ts-ignore
    const result = await fetch(
      "https://transaction.ban.app/order/place",
      // @ts-ignore
      config
    );
    console.table(result);
  }

  return (
    <>
      <Head>
        <title>{security.title}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <section className="grid grid-rows-[0.5fr_2fr] grid-cols-2 gap-2">
          <section>
            <h2 className="text-4xl font-bold tracking-tight  sm:text-5xl pb-4">
              {security.title}
            </h2>
            <p className="text-xl">Study presented by: {security.creator}</p>
            <p className="text-xl">{security.description}</p>

            <Setps fundingSucces={1} />
          </section>
          <section className="row-span-2 p">
            <h2 className="text-4xl font-bold tracking-tight  sm:text-5xl py-4">
              Orders
            </h2>
            {/*  {security.orders
              .sort((i, j) => j.price - i.price)
              .map((order) => {
                return (
                  <section
                    key={order.id}
                    className={`max-w-lg  border shadow rounded my-2 p-4 flex justify-between ${
                      order.side === "BUY" ? "bg-green-300" : "bg-red-300"
                    }`}
                  >
                    <p>
                      {order.qty} units @ {order.price / 1000}€
                    </p>
                  </section>
                );
              })} */}
          </section>
          <section>
            <Graph
              timeseries={security_history
                .sort((a, b) => b.created - a.created)
                .map((p) => {
                  return { timestamp: p.created * 1000, price: p.price };
                })}
            />
            <div className="flex">
              <div className="flex flex-col mr-5">
                Quantity
                <input
                  min="0"
                  className="
            form-control
            px-3
            py-1.5
            text-base
            font-normal
            text-gray-700
            bg-white bg-clip-padding
            border border-solid border-gray-300
            rounded
            transition
            ease-in-out
            m-0
            focus:text-gray-700 focus:bg-white focus:outline-none
          "
                  type="number"
                  name="quantity"
                  id="quantity"
                  onChange={(e) => setQuantity(Number(e.target.value))}
                  value={quantity}
                />
              </div>{" "}
              <div className="flex flex-col ml-5">
                Price{" "}
                <input
                  min="0"
                  className="
            form-control
            px-3
            py-1.5
            text-base
            font-normal
            text-gray-700
            bg-white bg-clip-padding
            border border-solid border-gray-300
            rounded
            transition
            ease-in-out
            m-0
            focus:text-gray-700 focus:bg-white focus:outline-none
          "
                  type="number" // number input ist immer integer, somit keine floats möglich => Textinput benutzen?
                  name="offer"
                  id="offer"
                  onChange={(e) => setOffer(Number(e.target.value))}
                  value={offer}
                />
              </div>{" "}
              <h3 className="text-4xl font-bold tracking-tight  sm:text-5xl py-4">
                {(quantity * offer) / 100 != 0
                  ? " = " + (quantity * offer) / 100
                  : " "}
              </h3>
            </div>
            <div className="flex gap-40 pt-5">
              <button
                onClick={() => handleOrder("buy")}
                className="inline-block px-6 py-2.5 bg-blue-600 text-white font-medium text-xs leading-tight uppercase rounded shadow-md hover:bg-blue-700 hover:shadow-lg focus:bg-blue-700 focus:shadow-lg focus:outline-none focus:ring-0 active:bg-blue-800 active:shadow-lg transition duration-150 ease-in-out"
              >
                Buy Order
              </button>
              <button
                onClick={() => handleOrder("sell")}
                type="button"
                className="inline-block px-6 py-2.5 bg-blue-600 text-white font-medium text-xs leading-tight uppercase rounded shadow-md hover:bg-blue-700 hover:shadow-lg focus:bg-blue-700 focus:shadow-lg focus:outline-none focus:ring-0 active:bg-blue-800 active:shadow-lg transition duration-150 ease-in-out"
              >
                Sell Order
              </button>
            </div>
          </section>
          <h2 className="text-4xl font-bold tracking-tight  sm:text-5xl py-4">
            Further information
          </h2>
        </section>
      </Layout>
    </>
  );
}
